// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String           @unique
  password        String
  image           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  roadmaps        Roadmap[]
  userProgress    UserProgress[]
}

model Roadmap {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  topic           String
  difficulty      String
  estimatedTime   String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  isPublic        Boolean          @default(false)
  userId          String?          @db.ObjectId
  user            User?            @relation(fields: [userId], references: [id])
  steps           Step[]
  userProgress    UserProgress[]
}

model Step {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  description     String
  order           Int
  estimatedTime   String
  content         String           @db.String
  roadmapId       String           @db.ObjectId
  roadmap         Roadmap          @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  resources       Resource[]
  quiz            Quiz?
  progress        UserProgress[]
}

model Resource {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  title           String
  url             String
  type            String
  stepId          String           @db.ObjectId
  step            Step             @relation(fields: [stepId], references: [id], onDelete: Cascade)
}

model Quiz {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  stepId          String           @unique @db.ObjectId
  step            Step             @relation(fields: [stepId], references: [id], onDelete: Cascade)
  questions       Question[]
}

model Question {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  text            String
  options         String[]
  correctOption   Int
  explanation     String
  quizId          String           @db.ObjectId
  quiz            Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  userId          String           @db.ObjectId
  roadmapId       String           @db.ObjectId
  stepId          String?          @db.ObjectId
  completed       Boolean          @default(false)
  lastAccessedAt  DateTime         @default(now())
  completedAt     DateTime?
  quizScore       Int?
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  roadmap         Roadmap          @relation(fields: [roadmapId], references: [id], onDelete: Cascade)
  step            Step?            @relation(fields: [stepId], references: [id])

  @@unique([userId, roadmapId, stepId])
}
